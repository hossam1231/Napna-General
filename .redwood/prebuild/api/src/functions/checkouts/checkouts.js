import _JSON$stringify from "@babel/runtime-corejs3/core-js/json/stringify";
import { logger } from "../../lib/logger";
import { checkout } from "../../services/checkouts/checkouts";

/**
 * The handler function is your code that processes http request events.
 * You can use return and throw to send a response or error, respectively.
 *
 * Important: When deployed, a custom serverless function is an open API endpoint and
 * is your responsibility to secure appropriately.
 *
 * @see {@link https://redwoodjs.com/docs/serverless-functions#security-considerations|Serverless Function Considerations}
 * in the RedwoodJS documentation for more information.
 *
 * @typedef { import('aws-lambda').APIGatewayEvent } APIGatewayEvent
 * @typedef { import('aws-lambda').Context } Context
 * @param { APIGatewayEvent } event - an object which contains information from the invoker.
 * @param { Context } context - contains information about the invocation,
 * function, and execution environment.
 */
export const handler = async (event, _context) => {
  logger.info('Invoked createCheckoutSession function');
  const {
    mode
  } = JSON.parse(event.body);
  const session = await checkout({
    mode
  });
  return {
    statusCode: 200,
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${process.env.STRIPE_SK}`
    },
    body: _JSON$stringify(session)
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsb2dnZXIiLCJjaGVja291dCIsImhhbmRsZXIiLCJldmVudCIsIl9jb250ZXh0IiwiaW5mbyIsIm1vZGUiLCJKU09OIiwicGFyc2UiLCJib2R5Iiwic2Vzc2lvbiIsInN0YXR1c0NvZGUiLCJoZWFkZXJzIiwiQXV0aG9yaXphdGlvbiIsInByb2Nlc3MiLCJlbnYiLCJTVFJJUEVfU0siXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9hcGkvc3JjL2Z1bmN0aW9ucy9jaGVja291dHMvY2hlY2tvdXRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ3NyYy9saWIvbG9nZ2VyJ1xuaW1wb3J0IHsgY2hlY2tvdXQgfSBmcm9tICdzcmMvc2VydmljZXMvY2hlY2tvdXRzJ1xuXG4vKipcbiAqIFRoZSBoYW5kbGVyIGZ1bmN0aW9uIGlzIHlvdXIgY29kZSB0aGF0IHByb2Nlc3NlcyBodHRwIHJlcXVlc3QgZXZlbnRzLlxuICogWW91IGNhbiB1c2UgcmV0dXJuIGFuZCB0aHJvdyB0byBzZW5kIGEgcmVzcG9uc2Ugb3IgZXJyb3IsIHJlc3BlY3RpdmVseS5cbiAqXG4gKiBJbXBvcnRhbnQ6IFdoZW4gZGVwbG95ZWQsIGEgY3VzdG9tIHNlcnZlcmxlc3MgZnVuY3Rpb24gaXMgYW4gb3BlbiBBUEkgZW5kcG9pbnQgYW5kXG4gKiBpcyB5b3VyIHJlc3BvbnNpYmlsaXR5IHRvIHNlY3VyZSBhcHByb3ByaWF0ZWx5LlxuICpcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vcmVkd29vZGpzLmNvbS9kb2NzL3NlcnZlcmxlc3MtZnVuY3Rpb25zI3NlY3VyaXR5LWNvbnNpZGVyYXRpb25zfFNlcnZlcmxlc3MgRnVuY3Rpb24gQ29uc2lkZXJhdGlvbnN9XG4gKiBpbiB0aGUgUmVkd29vZEpTIGRvY3VtZW50YXRpb24gZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKlxuICogQHR5cGVkZWYgeyBpbXBvcnQoJ2F3cy1sYW1iZGEnKS5BUElHYXRld2F5RXZlbnQgfSBBUElHYXRld2F5RXZlbnRcbiAqIEB0eXBlZGVmIHsgaW1wb3J0KCdhd3MtbGFtYmRhJykuQ29udGV4dCB9IENvbnRleHRcbiAqIEBwYXJhbSB7IEFQSUdhdGV3YXlFdmVudCB9IGV2ZW50IC0gYW4gb2JqZWN0IHdoaWNoIGNvbnRhaW5zIGluZm9ybWF0aW9uIGZyb20gdGhlIGludm9rZXIuXG4gKiBAcGFyYW0geyBDb250ZXh0IH0gY29udGV4dCAtIGNvbnRhaW5zIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpbnZvY2F0aW9uLFxuICogZnVuY3Rpb24sIGFuZCBleGVjdXRpb24gZW52aXJvbm1lbnQuXG4gKi9cbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgKGV2ZW50LCBfY29udGV4dCkgPT4ge1xuICBsb2dnZXIuaW5mbygnSW52b2tlZCBjcmVhdGVDaGVja291dFNlc3Npb24gZnVuY3Rpb24nKVxuXG4gIGNvbnN0IHsgbW9kZSB9ID0gSlNPTi5wYXJzZShldmVudC5ib2R5KVxuXG4gIGNvbnN0IHNlc3Npb24gPSBhd2FpdCBjaGVja291dCh7IG1vZGUgfSlcblxuICByZXR1cm4ge1xuICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICBoZWFkZXJzOiB7XG4gICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3Byb2Nlc3MuZW52LlNUUklQRV9TS31gLFxuICAgIH0sXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoc2Vzc2lvbiksXG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6IjtBQUFBLFNBQVNBLE1BQU07QUFDZixTQUFTQyxRQUFROztBQUVqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sTUFBTUMsT0FBTyxHQUFHLE9BQU9DLEtBQUssRUFBRUMsUUFBUSxLQUFLO0VBQ2hESixNQUFNLENBQUNLLElBQUksQ0FBQyx3Q0FBd0MsQ0FBQztFQUVyRCxNQUFNO0lBQUVDO0VBQUssQ0FBQyxHQUFHQyxJQUFJLENBQUNDLEtBQUssQ0FBQ0wsS0FBSyxDQUFDTSxJQUFJLENBQUM7RUFFdkMsTUFBTUMsT0FBTyxHQUFHLE1BQU1ULFFBQVEsQ0FBQztJQUFFSztFQUFLLENBQUMsQ0FBQztFQUV4QyxPQUFPO0lBQ0xLLFVBQVUsRUFBRSxHQUFHO0lBQ2ZDLE9BQU8sRUFBRTtNQUNQLGNBQWMsRUFBRSxrQkFBa0I7TUFDbENDLGFBQWEsRUFBRyxVQUFTQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsU0FBVTtJQUNqRCxDQUFDO0lBQ0RQLElBQUksRUFBRSxnQkFBZUMsT0FBTztFQUM5QixDQUFDO0FBQ0gsQ0FBQyJ9
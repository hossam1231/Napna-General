import _JSON$stringify from "@babel/runtime-corejs3/core-js/json/stringify";
import { logger } from "../../lib/logger";
import { getSession } from "../../services/checkouts/checkouts";

/**
 * The handler function is your code that processes http request events.
 * You can use return and throw to send a response or error, respectively.
 *
 * Important: When deployed, a custom serverless function is an open API endpoint and
 * is your responsibility to secure appropriately.
 *
 * @see {@link https://redwoodjs.com/docs/serverless-functions#security-considerations|Serverless Function Considerations}
 * in the RedwoodJS documentation for more information.
 *
 * @typedef { import('aws-lambda').APIGatewayEvent } APIGatewayEvent
 * @typedef { import('aws-lambda').Context } Context
 * @param { APIGatewayEvent } event - an object which contains information from the invoker.
 * @param { Context } context - contains information about the invocation,
 * function, and execution environment.
 */
export const handler = async ({
  body
}, _context) => {
  logger.info('Invoked retrieveCheckoutSession function');
  const {
    id
  } = JSON.parse(body);
  const session = await getSession({
    id
  });
  return {
    statusCode: 200,
    headers: {
      'Content-Type': 'application/json'
    },
    body: _JSON$stringify(session)
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsb2dnZXIiLCJnZXRTZXNzaW9uIiwiaGFuZGxlciIsImJvZHkiLCJfY29udGV4dCIsImluZm8iLCJpZCIsIkpTT04iLCJwYXJzZSIsInNlc3Npb24iLCJzdGF0dXNDb2RlIiwiaGVhZGVycyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2FwaS9zcmMvZnVuY3Rpb25zL3Nlc3Npb25zL3Nlc3Npb25zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ3NyYy9saWIvbG9nZ2VyJ1xuaW1wb3J0IHsgZ2V0U2Vzc2lvbiB9IGZyb20gJ3NyYy9zZXJ2aWNlcy9jaGVja291dHMnXG5cbi8qKlxuICogVGhlIGhhbmRsZXIgZnVuY3Rpb24gaXMgeW91ciBjb2RlIHRoYXQgcHJvY2Vzc2VzIGh0dHAgcmVxdWVzdCBldmVudHMuXG4gKiBZb3UgY2FuIHVzZSByZXR1cm4gYW5kIHRocm93IHRvIHNlbmQgYSByZXNwb25zZSBvciBlcnJvciwgcmVzcGVjdGl2ZWx5LlxuICpcbiAqIEltcG9ydGFudDogV2hlbiBkZXBsb3llZCwgYSBjdXN0b20gc2VydmVybGVzcyBmdW5jdGlvbiBpcyBhbiBvcGVuIEFQSSBlbmRwb2ludCBhbmRcbiAqIGlzIHlvdXIgcmVzcG9uc2liaWxpdHkgdG8gc2VjdXJlIGFwcHJvcHJpYXRlbHkuXG4gKlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9yZWR3b29kanMuY29tL2RvY3Mvc2VydmVybGVzcy1mdW5jdGlvbnMjc2VjdXJpdHktY29uc2lkZXJhdGlvbnN8U2VydmVybGVzcyBGdW5jdGlvbiBDb25zaWRlcmF0aW9uc31cbiAqIGluIHRoZSBSZWR3b29kSlMgZG9jdW1lbnRhdGlvbiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiBAdHlwZWRlZiB7IGltcG9ydCgnYXdzLWxhbWJkYScpLkFQSUdhdGV3YXlFdmVudCB9IEFQSUdhdGV3YXlFdmVudFxuICogQHR5cGVkZWYgeyBpbXBvcnQoJ2F3cy1sYW1iZGEnKS5Db250ZXh0IH0gQ29udGV4dFxuICogQHBhcmFtIHsgQVBJR2F0ZXdheUV2ZW50IH0gZXZlbnQgLSBhbiBvYmplY3Qgd2hpY2ggY29udGFpbnMgaW5mb3JtYXRpb24gZnJvbSB0aGUgaW52b2tlci5cbiAqIEBwYXJhbSB7IENvbnRleHQgfSBjb250ZXh0IC0gY29udGFpbnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGludm9jYXRpb24sXG4gKiBmdW5jdGlvbiwgYW5kIGV4ZWN1dGlvbiBlbnZpcm9ubWVudC5cbiAqL1xuZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyAoeyBib2R5IH0sIF9jb250ZXh0KSA9PiB7XG4gIGxvZ2dlci5pbmZvKCdJbnZva2VkIHJldHJpZXZlQ2hlY2tvdXRTZXNzaW9uIGZ1bmN0aW9uJylcblxuICBjb25zdCB7IGlkIH0gPSBKU09OLnBhcnNlKGJvZHkpXG5cbiAgY29uc3Qgc2Vzc2lvbiA9IGF3YWl0IGdldFNlc3Npb24oeyBpZCB9KVxuXG4gIHJldHVybiB7XG4gICAgc3RhdHVzQ29kZTogMjAwLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgfSxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeShzZXNzaW9uKSxcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiO0FBQUEsU0FBU0EsTUFBTTtBQUNmLFNBQVNDLFVBQVU7O0FBRW5CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxNQUFNQyxPQUFPLEdBQUcsT0FBTztFQUFFQztBQUFLLENBQUMsRUFBRUMsUUFBUSxLQUFLO0VBQ25ESixNQUFNLENBQUNLLElBQUksQ0FBQywwQ0FBMEMsQ0FBQztFQUV2RCxNQUFNO0lBQUVDO0VBQUcsQ0FBQyxHQUFHQyxJQUFJLENBQUNDLEtBQUssQ0FBQ0wsSUFBSSxDQUFDO0VBRS9CLE1BQU1NLE9BQU8sR0FBRyxNQUFNUixVQUFVLENBQUM7SUFBRUs7RUFBRyxDQUFDLENBQUM7RUFFeEMsT0FBTztJQUNMSSxVQUFVLEVBQUUsR0FBRztJQUNmQyxPQUFPLEVBQUU7TUFDUCxjQUFjLEVBQUU7SUFDbEIsQ0FBQztJQUNEUixJQUFJLEVBQUUsZ0JBQWVNLE9BQU87RUFDOUIsQ0FBQztBQUNILENBQUMifQ==
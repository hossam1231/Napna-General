{
  "version": 3,
  "sources": ["../../src/lib/auth.js"],
  "sourcesContent": ["import { AuthenticationError, ForbiddenError } from '@redwoodjs/graphql-server'\n\nimport { db } from './db'\n\n/**\n * The session object sent in as the first argument to getCurrentUser() will\n * have a single key `id` containing the unique ID of the logged in user\n * (whatever field you set as `authFields.id` in your auth function config).\n * You'll need to update the call to `db` below if you use a different model\n * name or unique field name, for example:\n *\n *   return await db.profile.findUnique({ where: { email: session.id } })\n *                   \u2500\u2500\u2500\u252C\u2500\u2500\u2500                       \u2500\u2500\u252C\u2500\u2500\n *      model accessor \u2500\u2518      unique id field name \u2500\u2518\n *\n * !! BEWARE !! Anything returned from this function will be available to the\n * client--it becomes the content of `currentUser` on the web side (as well as\n * `context.currentUser` on the api side). You should carefully add additional\n * fields to the `select` object below once you've decided they are safe to be\n * seen if someone were to open the Web Inspector in their browser.\n */\nexport const getCurrentUser = async (session) => {\n  return await db.user.findUnique({\n    where: { id: session.id },\n    select: {\n      id: true,\n    },\n  })\n}\n\n/**\n * The user is authenticated if there is a currentUser in the context\n *\n * @returns {boolean} - If the currentUser is authenticated\n */\nexport const isAuthenticated = () => {\n  return !!context.currentUser\n}\n\n/**\n * When checking role membership, roles can be a single value, a list, or none.\n * You can use Prisma enums too (if you're using them for roles), just import your enum type from `@prisma/client`\n */\n\n/**\n * Checks if the currentUser is authenticated (and assigned one of the given roles)\n *\n * @param roles: AllowedRoles - Checks if the currentUser is assigned one of these roles\n *\n * @returns {boolean} - Returns true if the currentUser is logged in and assigned one of the given roles,\n * or when no roles are provided to check against. Otherwise returns false.\n */\nexport const hasRole = ({ roles }) => {\n  if (!isAuthenticated()) {\n    return false\n  }\n\n  if (roles) {\n    if (Array.isArray(roles)) {\n      return context.currentUser.roles?.some((r) => roles.includes(r))\n    }\n\n    if (typeof roles === 'string') {\n      return context.currentUser.roles?.includes(roles)\n    }\n\n    // roles not found\n    return false\n  }\n\n  return true\n}\n\n/**\n * Use requireAuth in your services to check that a user is logged in,\n * whether or not they are assigned a role, and optionally raise an\n * error if they're not.\n *\n * @param roles: AllowedRoles - When checking role membership, these roles grant access.\n *\n * @returns - If the currentUser is authenticated (and assigned one of the given roles)\n *\n * @throws {AuthenticationError} - If the currentUser is not authenticated\n * @throws {ForbiddenError} If the currentUser is not allowed due to role permissions\n *\n * @see https://github.com/redwoodjs/redwood/tree/main/packages/auth for examples\n */\nexport const requireAuth = ({ roles }) => {\n  if (!isAuthenticated()) {\n    throw new AuthenticationError(\"You don't have permission to do that.\")\n  }\n\n  if (!hasRole({ roles })) {\n    throw new ForbiddenError(\"You don't have access to do that.\")\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,4BAAoD;AAEpD,gBAAmB;AAmBZ,MAAMA,iBAAiB,OAAOC,YAAY;AAC/C,SAAO,MAAMC,aAAGC,KAAKC,WAAW;IAC9BC,OAAO;MAAEC,IAAIL,QAAQK;IAAG;IACxBC,QAAQ;MACND,IAAI;IACN;EACF,CAAC;AACH;AAOO,MAAME,kBAAkB,MAAM;AACnC,SAAO,CAAC,CAACC,8BAAQC;AACnB;AAeO,MAAMC,UAAU,CAAC;EAAEC;AAAM,MAAM;;AACpC,MAAI,CAACJ,gBAAe,GAAI;AACtB,WAAO;EACT;AAEA,MAAII,OAAO;AACT,YAAI,gBAAAC,SAAcD,KAAK,GAAG;AACxB,cAAOH,mCAAQC,YAAYE,UAApBH,mBAA2BK,KAAMC,WAAM,gBAAAC,SAAAJ,KAAK,EAAA,KAALA,OAAeG,CAAC;IAChE;AAEA,QAAI,OAAOH,UAAU,UAAU;AAC7B,cAAOH,mCAAQC,YAAYE,UAApBH,mBAA2BQ,SAASL;IAC7C;AAGA,WAAO;EACT;AAEA,SAAO;AACT;AAgBO,MAAMM,cAAc,CAAC;EAAEN;AAAM,MAAM;AACxC,MAAI,CAACJ,gBAAe,GAAI;AACtB,UAAM,IAAIW,0CAAoB,uCAAuC;EACvE;AAEA,MAAI,CAACR,QAAQ;IAAEC;EAAM,CAAC,GAAG;AACvB,UAAM,IAAIQ,qCAAe,mCAAmC;EAC9D;AACF;",
  "names": ["getCurrentUser", "session", "db", "user", "findUnique", "where", "id", "select", "isAuthenticated", "context", "currentUser", "hasRole", "roles", "_Array$isArray", "some", "r", "_includesInstanceProperty", "includes", "requireAuth", "AuthenticationError", "ForbiddenError"]
}

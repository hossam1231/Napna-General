{
  "version": 3,
  "sources": ["../../../src/services/checkouts/checkouts.js"],
  "sourcesContent": ["import { db } from 'src/lib/db'\nimport { stripe } from 'src/lib/stripe'\n\n/**\n * @type {'payment' | 'subscription'} Mode\n * @type {{ id: string, quantity: number }} Cart\n *\n * @param {{\n *  mode: Mode\n *  cart: Cart\n *  customerId: string\n * }}\n */\nexport const checkout = async ({ mode, cart, customerId }, { context }) => {\n  // eslint-disable-next-line camelcase\n  const line_items = cart.map((product) => ({\n    price: product.id,\n    quantity: product.quantity,\n  }))\n\n  return stripe.checkout.sessions.create({\n    // See https://stripe.com/docs/payments/checkout/custom-success-page#modify-success-url.\n    success_url: `${context.event.headers.referer}success?sessionId={CHECKOUT_SESSION_ID}`,\n    cancel_url: `${context.event.headers.referer}failure`,\n    // eslint-disable-next-line camelcase\n    line_items,\n    mode,\n    payment_method_types: ['card'],\n    customer: customerId,\n  })\n}\n\nexport const getSession = async ({ id }) => {\n  // Get session object\n  const session = await stripe.checkout.sessions.retrieve(id)\n\n  // Use customer to find out whether customer has signed up before\n  const user = await db.user.findUnique({\n    where: { email: session.customer_details.email },\n  })\n\n  const isSignedUp = !!user\n\n  return {\n    id: session.id,\n    customerId: session.customer,\n    customerName: session.customer_details.name,\n    customerEmail: session.customer_details.email,\n    customerSignedUp: isSignedUp,\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gBAAW;AACX,oBAAe;AAYR,MAAMA,WAAW,OAAO;EAAEC;EAAMC;EAAMC;AAAW,GAAG;EAAEC;AAAQ,MAAM;AAEzE,QAAMC,iBAAa,WAAAC,SAAAJ,IAAI,EAAA,KAAJA,MAAUK,cAAa;IACxCC,OAAOD,QAAQE;IACfC,UAAUH,QAAQG;EACpB,EAAE;AAEF,SAAOC,qBAAOX,SAASY,SAASC,OAAO;IAErCC,aAAc,GAAEV,QAAQW,MAAMC,QAAQC;IACtCC,YAAa,GAAEd,QAAQW,MAAMC,QAAQC;IAErCZ;IACAJ;IACAkB,sBAAsB,CAAC,MAAM;IAC7BC,UAAUjB;EACZ,CAAC;AACH;AAEO,MAAMkB,aAAa,OAAO;EAAEZ;AAAG,MAAM;AAE1C,QAAMa,UAAU,MAAMX,qBAAOX,SAASY,SAASW,SAASd,EAAE;AAG1D,QAAMe,OAAO,MAAMC,aAAGD,KAAKE,WAAW;IACpCC,OAAO;MAAEC,OAAON,QAAQO,iBAAiBD;IAAM;EACjD,CAAC;AAED,QAAME,aAAa,CAAC,CAACN;AAErB,SAAO;IACLf,IAAIa,QAAQb;IACZN,YAAYmB,QAAQF;IACpBW,cAAcT,QAAQO,iBAAiBG;IACvCC,eAAeX,QAAQO,iBAAiBD;IACxCM,kBAAkBJ;EACpB;AACF;",
  "names": ["checkout", "mode", "cart", "customerId", "context", "line_items", "_mapInstanceProperty", "product", "price", "id", "quantity", "stripe", "sessions", "create", "success_url", "event", "headers", "referer", "cancel_url", "payment_method_types", "customer", "getSession", "session", "retrieve", "user", "db", "findUnique", "where", "email", "customer_details", "isSignedUp", "customerName", "name", "customerEmail", "customerSignedUp"]
}

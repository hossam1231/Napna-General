"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.tasks = exports.splitPathAndModel = exports.shouldUseTailwindCSS = exports.routes = exports.handler = exports.files = exports.description = exports.command = exports.builder = void 0;
var _find = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/find"));
var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/includes"));
var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/map"));
var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/for-each"));
var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/filter"));
var _indexOf = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/index-of"));
var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/object/keys"));
var _reduce = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/reduce"));
var _sort = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/sort"));
var _entries = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/object/entries"));
var _slice = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/slice"));
var _fs = _interopRequireDefault(require("fs"));
var _path = _interopRequireDefault(require("path"));
var _camelcase = _interopRequireDefault(require("camelcase"));
var _execa = _interopRequireDefault(require("execa"));
var _humanizeString = _interopRequireDefault(require("humanize-string"));
var _listr = require("listr2");
var _paramCase = require("param-case");
var _pascalcase = _interopRequireDefault(require("pascalcase"));
var _terminalLink = _interopRequireDefault(require("terminal-link"));
var _config = require("@redwoodjs/internal/dist/config");
var _generate = require("@redwoodjs/internal/dist/generate/generate");
var _lib = require("../../../lib");
var _colors = _interopRequireDefault(require("../../../lib/colors"));
var _rwPluralize = require("../../../lib/rwPluralize");
var _schemaHelpers = require("../../../lib/schemaHelpers");
var _generate2 = require("../../generate");
var _helpers = require("../helpers");
var _sdl = require("../sdl/sdl");
var _service = require("../service/service");
// note a better way to do this is in https://github.com/redwoodjs/redwood/pull/3783/files
const NON_EDITABLE_COLUMNS = ['id', 'createdAt', 'updatedAt'];
// Any assets that should not trigger an overwrite error and require a --force
const SKIPPABLE_ASSETS = ['scaffold.css'];
const PACKAGE_SET = 'Set';
const getIdType = model => {
  var _model$fields$find, _context;
  return (_model$fields$find = (0, _find.default)(_context = model.fields).call(_context, field => field.isId)) === null || _model$fields$find === void 0 ? void 0 : _model$fields$find.type;
};
const filterAutoGeneratedColumnsForScaffold = column => {
  var _column$default;
  const autoGeneratedFunctions = ['now', 'autoincrement'];
  return !(column.isId || column.isUpdatedAt || (0, _includes.default)(autoGeneratedFunctions).call(autoGeneratedFunctions, column === null || column === void 0 ? void 0 : (_column$default = column.default) === null || _column$default === void 0 ? void 0 : _column$default.name));
};
const getImportComponentNames = (name, scaffoldPath, nestScaffoldByModel = true) => {
  const pluralName = (0, _pascalcase.default)((0, _rwPluralize.pluralize)(name));
  const singularName = (0, _pascalcase.default)((0, _rwPluralize.singularize)(name));
  let componentPath;
  if (scaffoldPath === '') {
    componentPath = nestScaffoldByModel ? `src/components/${singularName}` : `src/components`;
  } else {
    var _context2;
    const sP = (0, _map.default)(_context2 = scaffoldPath.split('/')).call(_context2, _pascalcase.default).join('/');
    componentPath = nestScaffoldByModel ? `src/components/${sP}/${singularName}` : `src/components/${sP}`;
  }
  return {
    importComponentName: `${componentPath}/${singularName}`,
    importComponentNameCell: `${componentPath}/${singularName}Cell`,
    importComponentEditNameCell: `${componentPath}/Edit${singularName}Cell`,
    importComponentNameForm: `${componentPath}/${singularName}Form`,
    importComponentNewName: `${componentPath}/New${singularName}`,
    importComponentNames: `${componentPath}/${pluralName}`,
    importComponentNamesCell: `${componentPath}/${pluralName}Cell`,
    importLayoutNames: `src/layouts/ScaffoldLayout`
  };
};

// Includes imports from getImportComponentNames()
const getTemplateStrings = (name, scaffoldPath, nestScaffoldByModel = true) => {
  const nameVars = (0, _lib.nameVariants)(name);
  const camelScaffoldPath = (0, _camelcase.default)((0, _pascalcase.default)(scaffoldPath));
  return {
    pluralRouteName: scaffoldPath === '' ? nameVars.pluralCamelName : `${camelScaffoldPath}${nameVars.pluralPascalName}`,
    editRouteName: scaffoldPath === '' ? `edit${nameVars.singularPascalName}` : `${camelScaffoldPath}Edit${nameVars.singularPascalName}`,
    singularRouteName: scaffoldPath === '' ? nameVars.singularCamelName : `${camelScaffoldPath}${nameVars.singularPascalName}`,
    newRouteName: scaffoldPath === '' ? `new${nameVars.singularPascalName}` : `${camelScaffoldPath}New${nameVars.singularPascalName}`,
    ...getImportComponentNames(name, scaffoldPath, nestScaffoldByModel)
  };
};

// Checks whether Tailwind is installed, and if the `flag` argument is not
// already set, returns true. Otherwise just returns `flag`
const shouldUseTailwindCSS = flag => {
  if (flag === undefined) {
    return _fs.default.existsSync(_path.default.join((0, _lib.getPaths)().web.config, 'tailwind.config.js'));
  } else {
    return flag;
  }
};
exports.shouldUseTailwindCSS = shouldUseTailwindCSS;
const files = async ({
  docs,
  model: name,
  path: scaffoldPath = '',
  tests = true,
  typescript = false,
  tailwind = false,
  force = false,
  nestScaffoldByModel
}) => {
  var _context3;
  const model = await (0, _schemaHelpers.getSchema)(name);
  if (typeof nestScaffoldByModel === 'undefined') {
    nestScaffoldByModel = (0, _config.getConfig)().generate.nestScaffoldByModel;
  }
  const templateStrings = getTemplateStrings(name, scaffoldPath, nestScaffoldByModel);
  const pascalScaffoldPath = scaffoldPath === '' ? scaffoldPath : (0, _map.default)(_context3 = scaffoldPath.split('/')).call(_context3, _pascalcase.default).join('/') + '/';
  return {
    ...(await componentFiles(name, pascalScaffoldPath, typescript, nestScaffoldByModel, templateStrings)),
    ...(await (0, _sdl.files)({
      ...(0, _lib.getDefaultArgs)(_sdl.builder),
      docs,
      name,
      typescript
    })),
    ...(await (0, _service.files)({
      ...(0, _lib.getDefaultArgs)(_service.builder),
      name,
      crud: true,
      relations: (0, _helpers.relationsForModel)(model),
      tests,
      typescript
    })),
    ...assetFiles(name, tailwind),
    ...(await formatters(name, typescript)),
    ...layoutFiles(name, force, typescript, templateStrings),
    ...(await pageFiles(name, pascalScaffoldPath, typescript, nestScaffoldByModel, templateStrings))
  };
};
exports.files = files;
const assetFiles = (name, tailwind) => {
  let fileList = {};
  const assets = _fs.default.readdirSync((0, _helpers.customOrDefaultTemplatePath)({
    side: 'web',
    generator: 'scaffold',
    templatePath: 'assets'
  }));
  (0, _forEach.default)(assets).call(assets, asset => {
    // check if the asset name matches the Tailwind preference
    if (tailwind && asset.match(/tailwind/) || !tailwind && !asset.match(/tailwind/)) {
      const outputAssetName = asset.replace(/\.template/, '').replace(/\.tailwind/, '');
      const outputPath = _path.default.join((0, _lib.getPaths)().web.src, outputAssetName);

      // skip assets that already exist on disk, never worry about overwriting
      if (!(0, _includes.default)(SKIPPABLE_ASSETS).call(SKIPPABLE_ASSETS, _path.default.basename(outputPath)) || !_fs.default.existsSync(outputPath)) {
        const template = (0, _lib.generateTemplate)((0, _helpers.customOrDefaultTemplatePath)({
          side: 'web',
          generator: 'scaffold',
          templatePath: _path.default.join('assets', asset)
        }), {
          name
        });
        fileList[outputPath] = template;
      }
    }
  });
  return fileList;
};
const formatters = async (name, isTypescript) => {
  const outputPath = _path.default.join((0, _lib.getPaths)().web.src, 'lib', isTypescript ? 'formatters.tsx' : 'formatters.js');
  const outputPathTest = _path.default.join((0, _lib.getPaths)().web.src, 'lib', isTypescript ? 'formatters.test.tsx' : 'formatters.test.js');

  // skip files that already exist on disk, never worry about overwriting
  if (_fs.default.existsSync(outputPath)) {
    return;
  }
  const template = (0, _lib.generateTemplate)((0, _helpers.customOrDefaultTemplatePath)({
    side: 'web',
    generator: 'scaffold',
    templatePath: _path.default.join('lib', 'formatters.tsx.template')
  }), {
    name
  });
  const templateTest = (0, _lib.generateTemplate)((0, _helpers.customOrDefaultTemplatePath)({
    side: 'web',
    generator: 'scaffold',
    templatePath: _path.default.join('lib', 'formatters.test.tsx.template')
  }), {
    name
  });
  return {
    [outputPath]: isTypescript ? template : (0, _lib.transformTSToJS)(outputPath, template),
    [outputPathTest]: isTypescript ? templateTest : (0, _lib.transformTSToJS)(outputPathTest, templateTest)
  };
};
const layoutFiles = (name, force, generateTypescript, templateStrings) => {
  let fileList = {};
  const layouts = _fs.default.readdirSync((0, _helpers.customOrDefaultTemplatePath)({
    side: 'web',
    generator: 'scaffold',
    templatePath: 'layouts'
  }));
  (0, _forEach.default)(layouts).call(layouts, layout => {
    const outputLayoutName = layout.replace(/\.tsx\.template/, generateTypescript ? '.tsx' : '.js');
    const outputPath = _path.default.join((0, _lib.getPaths)().web.layouts, 'ScaffoldLayout', outputLayoutName);

    // Since the ScaffoldLayout is shared, don't overwrite by default
    if (!_fs.default.existsSync(outputPath) || force) {
      const template = (0, _lib.generateTemplate)((0, _helpers.customOrDefaultTemplatePath)({
        side: 'web',
        generator: 'scaffold',
        templatePath: _path.default.join('layouts', layout)
      }), {
        name,
        pascalScaffoldPath: '',
        ...templateStrings
      });
      fileList[outputPath] = generateTypescript ? template : (0, _lib.transformTSToJS)(outputPath, template);
    }
  });
  return fileList;
};
const pageFiles = async (name, pascalScaffoldPath = '', generateTypescript, nestScaffoldByModel = true, templateStrings) => {
  const pluralName = (0, _pascalcase.default)((0, _rwPluralize.pluralize)(name));
  const singularName = (0, _pascalcase.default)((0, _rwPluralize.singularize)(name));
  const model = await (0, _schemaHelpers.getSchema)(singularName);
  const idType = getIdType(model);
  const idTsType = (0, _helpers.mapPrismaScalarToPagePropTsType)(idType);
  let fileList = {};
  const pages = _fs.default.readdirSync((0, _helpers.customOrDefaultTemplatePath)({
    side: 'web',
    generator: 'scaffold',
    templatePath: 'pages'
  }));
  (0, _forEach.default)(pages).call(pages, page => {
    // Sanitize page names
    const outputPageName = page.replace(/Names/, pluralName).replace(/Name/, singularName).replace(/\.tsx\.template/, generateTypescript ? '.tsx' : '.js');
    const finalFolder = (nestScaffoldByModel ? singularName + '/' : '') + outputPageName.replace(/\.(js|tsx?)/, '');
    const outputPath = _path.default.join((0, _lib.getPaths)().web.pages, pascalScaffoldPath, finalFolder, outputPageName);
    const template = (0, _lib.generateTemplate)((0, _helpers.customOrDefaultTemplatePath)({
      side: 'web',
      generator: 'scaffold',
      templatePath: _path.default.join('pages', page)
    }), {
      idTsType,
      name,
      pascalScaffoldPath,
      ...templateStrings
    });
    fileList[outputPath] = generateTypescript ? template : (0, _lib.transformTSToJS)(outputPath, template);
  });
  return fileList;
};
const componentFiles = async (name, pascalScaffoldPath = '', generateTypescript, nestScaffoldByModel = true, templateStrings) => {
  var _context4, _context5, _context6, _context7, _context8, _context9, _context10;
  const pluralName = (0, _pascalcase.default)((0, _rwPluralize.pluralize)(name));
  const singularName = (0, _pascalcase.default)((0, _rwPluralize.singularize)(name));
  const model = await (0, _schemaHelpers.getSchema)(singularName);
  const idType = getIdType(model);
  const intForeignKeys = (0, _helpers.intForeignKeysForModel)(model);
  let fileList = {};
  const componentMetadata = {
    Enum: {
      componentName: 'RadioField',
      defaultProp: 'defaultChecked',
      validation: () => false,
      listDisplayFunction: 'formatEnum',
      displayFunction: 'formatEnum'
    },
    EnumList: {
      componentName: 'CheckboxField',
      defaultProp: 'defaultChecked',
      validation: () => false,
      listDisplayFunction: 'formatEnum',
      displayFunction: 'formatEnum'
    },
    Boolean: {
      componentName: 'CheckboxField',
      defaultProp: 'defaultChecked',
      validation: () => false,
      listDisplayFunction: 'checkboxInputTag',
      displayFunction: 'checkboxInputTag'
    },
    DateTime: {
      componentName: 'DatetimeLocalField',
      deserializeFunction: 'formatDatetime',
      listDisplayFunction: 'timeTag',
      displayFunction: 'timeTag'
    },
    Int: {
      componentName: 'NumberField'
    },
    Json: {
      componentName: 'TextAreaField',
      validation: isRequired => `{{ valueAsJSON: true${isRequired ? ', required: true' : ''} }}`,
      displayFunction: 'jsonDisplay',
      listDisplayFunction: 'jsonTruncate',
      deserializeFunction: 'JSON.stringify'
    },
    Float: {
      validation: isRequired => `{{ valueAsNumber: true${isRequired ? ', required: true' : ''} }}`
    },
    Decimal: {
      validation: isRequired => `{{ valueAsNumber: true${isRequired ? ', required: true' : ''} }}`
    },
    default: {
      componentName: 'TextField',
      defaultProp: 'defaultValue',
      deserializeFunction: '',
      validation: '{{ required: true }}',
      displayFunction: undefined,
      listDisplayFunction: 'truncate'
    }
  };
  const columns = (0, _map.default)(_context4 = (0, _filter.default)(_context5 = model.fields).call(_context5, field => field.kind !== 'object')).call(_context4, column => {
    var _componentMetadata$co, _componentMetadata$me, _componentMetadata$me2, _componentMetadata$me3, _componentMetadata$me4, _componentMetadata$me5;
    let validation;
    if ((_componentMetadata$co = componentMetadata[column.type]) !== null && _componentMetadata$co !== void 0 && _componentMetadata$co.validation) {
      var _componentMetadata$co2;
      validation = (_componentMetadata$co2 = componentMetadata[column.type]) === null || _componentMetadata$co2 === void 0 ? void 0 : _componentMetadata$co2.validation(column === null || column === void 0 ? void 0 : column.isRequired);
    } else {
      validation = column !== null && column !== void 0 && column.isRequired ? componentMetadata.default.validation : null;
    }
    const isEnum = column.kind === 'enum';
    const isList = column.isList;
    const enumType = isEnum && isList ? 'EnumList' : 'Enum';
    const metadataKey = isEnum ? enumType : column.type;
    return {
      ...column,
      label: (0, _humanizeString.default)(column.name),
      component: ((_componentMetadata$me = componentMetadata[metadataKey]) === null || _componentMetadata$me === void 0 ? void 0 : _componentMetadata$me.componentName) || componentMetadata.default.componentName,
      defaultProp: ((_componentMetadata$me2 = componentMetadata[metadataKey]) === null || _componentMetadata$me2 === void 0 ? void 0 : _componentMetadata$me2.defaultProp) || componentMetadata.default.defaultProp,
      deserializeFunction: ((_componentMetadata$me3 = componentMetadata[metadataKey]) === null || _componentMetadata$me3 === void 0 ? void 0 : _componentMetadata$me3.deserializeFunction) || componentMetadata.default.deserializeFunction,
      validation,
      listDisplayFunction: ((_componentMetadata$me4 = componentMetadata[metadataKey]) === null || _componentMetadata$me4 === void 0 ? void 0 : _componentMetadata$me4.listDisplayFunction) || componentMetadata.default.listDisplayFunction,
      displayFunction: ((_componentMetadata$me5 = componentMetadata[metadataKey]) === null || _componentMetadata$me5 === void 0 ? void 0 : _componentMetadata$me5.displayFunction) || componentMetadata.default.displayFunction,
      values: column.enumValues || [],
      isList,
      isEnum
    };
  });
  const editableColumns = (0, _filter.default)(_context6 = (0, _filter.default)(columns).call(columns, column => {
    return (0, _indexOf.default)(NON_EDITABLE_COLUMNS).call(NON_EDITABLE_COLUMNS, column.name) === -1;
  })).call(_context6, filterAutoGeneratedColumnsForScaffold);
  const fieldsToImport = (0, _keys.default)((0, _reduce.default)(editableColumns).call(editableColumns, (accumulator, column) => {
    accumulator[column.component] = true;
    return accumulator;
  }, {}));
  if (!fieldsToImport.length) {
    throw new Error(`There are no editable fields in the ${name} model`);
  }
  const components = _fs.default.readdirSync((0, _helpers.customOrDefaultTemplatePath)({
    side: 'web',
    generator: 'scaffold',
    templatePath: 'components'
  }));
  const formattersImports = (0, _filter.default)(_context7 = (0, _sort.default)(_context8 = (0, _map.default)(columns).call(columns, column => column.displayFunction)).call(_context8)
  // filter out duplicates, so we only keep unique import names
  ).call(_context7, (name, index, array) => (0, _indexOf.default)(array).call(array, name) === index).join(', ');
  const listFormattersImports = (0, _filter.default)(_context9 = (0, _sort.default)(_context10 = (0, _map.default)(columns).call(columns, column => column.listDisplayFunction)).call(_context10)
  // filter out duplicates, so we only keep unique import names
  ).call(_context9, (name, index, array) => (0, _indexOf.default)(array).call(array, name) === index).join(', ');
  await (0, _lib.asyncForEach)(components, component => {
    const outputComponentName = component.replace(/Names/, pluralName).replace(/Name/, singularName).replace(/\.tsx\.template/, generateTypescript ? '.tsx' : '.js');
    const finalFolder = (nestScaffoldByModel ? singularName + '/' : '') + outputComponentName.replace(/\.(js|tsx?)/, '');
    const outputPath = _path.default.join((0, _lib.getPaths)().web.components, pascalScaffoldPath, finalFolder, outputComponentName);
    const template = (0, _lib.generateTemplate)((0, _helpers.customOrDefaultTemplatePath)({
      side: 'web',
      generator: 'scaffold',
      templatePath: _path.default.join('components', component)
    }), {
      name,
      columns,
      fieldsToImport,
      editableColumns,
      idType,
      intForeignKeys,
      pascalScaffoldPath,
      listFormattersImports,
      formattersImports,
      ...templateStrings
    });
    fileList[outputPath] = generateTypescript ? template : (0, _lib.transformTSToJS)(outputPath, template);
  });
  return fileList;
};

// add routes for all pages
const routes = async ({
  model: name,
  path: scaffoldPath = '',
  nestScaffoldByModel
}) => {
  var _context11;
  if (typeof nestScaffoldByModel === 'undefined') {
    nestScaffoldByModel = (0, _config.getConfig)().generate.nestScaffoldByModel;
  }
  const templateNames = getTemplateStrings(name, scaffoldPath);
  const nameVars = (0, _lib.nameVariants)(name);
  const model = await (0, _schemaHelpers.getSchema)(nameVars.singularPascalName);
  const idRouteParam = getIdType(model) === 'Int' ? ':Int' : '';
  const paramScaffoldPath = scaffoldPath === '' ? scaffoldPath : (0, _map.default)(_context11 = scaffoldPath.split('/')).call(_context11, _paramCase.paramCase).join('/') + '/';
  const pascalScaffoldPath = (0, _pascalcase.default)(scaffoldPath);
  const pageRoot = pascalScaffoldPath + (nestScaffoldByModel ? nameVars.singularPascalName : '');
  return [
  // new
  `<Route path="/${paramScaffoldPath}${nameVars.pluralParamName}/new" page={${pageRoot}New${nameVars.singularPascalName}Page} name="${templateNames.newRouteName}" />`,
  // edit
  `<Route path="/${paramScaffoldPath}${nameVars.pluralParamName}/{id${idRouteParam}}/edit" page={${pageRoot}Edit${nameVars.singularPascalName}Page} name="${templateNames.editRouteName}" />`,
  // singular
  `<Route path="/${paramScaffoldPath}${nameVars.pluralParamName}/{id${idRouteParam}}" page={${pageRoot}${nameVars.singularPascalName}Page} name="${templateNames.singularRouteName}" />`,
  // plural
  `<Route path="/${paramScaffoldPath}${nameVars.pluralParamName}" page={${pageRoot}${nameVars.pluralPascalName}Page} name="${templateNames.pluralRouteName}" />`];
};
exports.routes = routes;
const addLayoutImport = () => {
  const importLayout = `import ScaffoldLayout from 'src/layouts/ScaffoldLayout'`;
  const routesPath = (0, _lib.getPaths)().web.routes;
  const routesContent = (0, _lib.readFile)(routesPath).toString();
  if (!routesContent.match(importLayout)) {
    const newRoutesContent = routesContent.replace(/['"]@redwoodjs\/router['"](\s*)/, `'@redwoodjs/router'\n\n${importLayout}$1`);
    (0, _lib.writeFile)(routesPath, newRoutesContent, {
      overwriteExisting: true
    });
    return 'Added layout import to Routes.{js,tsx}';
  } else {
    return 'Layout import already exists in Routes.{js,tsx}';
  }
};
const addHelperPackages = async task => {
  const packageJsonPath = _path.default.join((0, _lib.getPaths)().web.base, 'package.json');
  const packageJson = require(packageJsonPath);

  // Skip if humanize-string is already installed
  if (packageJson.dependencies['humanize-string']) {
    return task.skip('Skipping. Already installed');
  }

  // Has to be v2.1.0 because v3 switched to ESM module format, which we don't
  // support yet (2022-09-20)
  // TODO: Update to latest version when RW supports ESMs
  await (0, _execa.default)('yarn', ['workspace', 'web', 'add', 'humanize-string@2.1.0']);
};
const addSetImport = task => {
  const routesPath = (0, _lib.getPaths)().web.routes;
  const routesContent = (0, _lib.readFile)(routesPath).toString();
  const [redwoodRouterImport, importStart, spacing, importContent, importEnd] = routesContent.match(/(import {)(\s*)([^]*)(} from ['"]@redwoodjs\/router['"])/) || [];
  if (!redwoodRouterImport) {
    task.skip("Couldn't add Set import from @redwoodjs/router to Routes.{js,tsx}");
    return undefined;
  }
  const routerImports = importContent.replace(/\s/g, '').split(',');
  if ((0, _includes.default)(routerImports).call(routerImports, PACKAGE_SET)) {
    return 'Skipping Set import';
  }
  const newRoutesContent = routesContent.replace(redwoodRouterImport, importStart + spacing + PACKAGE_SET + `,` + spacing + importContent + importEnd);
  (0, _lib.writeFile)(routesPath, newRoutesContent, {
    overwriteExisting: true
  });
  return 'Added Set import to Routes.{js,tsx}';
};
const addScaffoldSetToRouter = async (model, path) => {
  const templateNames = getTemplateStrings(model, path);
  const nameVars = (0, _lib.nameVariants)(model);
  const title = nameVars.pluralPascalName;
  const titleTo = templateNames.pluralRouteName;
  const buttonLabel = `New ${nameVars.singularPascalName}`;
  const buttonTo = templateNames.newRouteName;
  return (0, _lib.addRoutesToRouterTask)(await routes({
    model,
    path
  }), 'ScaffoldLayout', {
    title,
    titleTo,
    buttonLabel,
    buttonTo
  });
};
const command = 'scaffold <model>';
exports.command = command;
const description = 'Generate Pages, SDL, and Services files based on a given DB schema Model. Also accepts <path/model>';
exports.description = description;
const builder = yargs => {
  var _context12;
  yargs.positional('model', {
    description: "Model to scaffold. You can also use <path/model> to nest files by type at the given path directory (or directories). For example, 'rw g scaffold admin/post'"
  }).option('docs', {
    description: 'Generate SDL and GraphQL comments to use in documentation',
    type: 'boolean',
    default: false
  }).option('tests', {
    description: 'Generate test files',
    type: 'boolean'
  }).option('tailwind', {
    description: 'Generate TailwindCSS version of scaffold.css (automatically set to `true` if TailwindCSS config exists)',
    type: 'boolean'
  }).epilogue(`Also see the ${(0, _terminalLink.default)('Redwood CLI Reference', 'https://redwoodjs.com/docs/cli-commands#generate-scaffold')}`);

  // Merge generator defaults in
  (0, _forEach.default)(_context12 = (0, _entries.default)(_generate2.yargsDefaults)).call(_context12, ([option, config]) => {
    yargs.option(option, config);
  });
};
exports.builder = builder;
const tasks = ({
  docs,
  model,
  path,
  force,
  tests,
  typescript,
  javascript,
  tailwind
}) => {
  return new _listr.Listr([{
    title: 'Generating scaffold files...',
    task: async () => {
      const f = await files({
        docs,
        model,
        path,
        tests,
        typescript,
        javascript,
        tailwind,
        force
      });
      return (0, _lib.writeFilesTask)(f, {
        overwriteExisting: force
      });
    }
  }, {
    title: 'Install helper packages',
    task: (_, task) => addHelperPackages(task)
  }, {
    title: 'Adding layout import...',
    task: async () => addLayoutImport()
  }, {
    title: 'Adding set import...',
    task: async (_, task) => addSetImport(task)
  }, {
    title: 'Adding scaffold routes...',
    task: async () => addScaffoldSetToRouter(model, path)
  }, {
    title: 'Adding scaffold asset imports...',
    task: () => (0, _lib.addScaffoldImport)()
  }, {
    title: `Generating types ...`,
    task: _generate.generate
  }], {
    rendererOptions: {
      collapse: false
    },
    exitOnError: true
  });
};
exports.tasks = tasks;
const handler = async ({
  model: modelArg,
  force,
  tests,
  typescript,
  tailwind,
  docs = false
}) => {
  if (tests === undefined) {
    tests = (0, _config.getConfig)().generate.tests;
  }
  const {
    model,
    path
  } = splitPathAndModel(modelArg);
  tailwind = shouldUseTailwindCSS(tailwind);
  try {
    const {
      name
    } = await (0, _schemaHelpers.verifyModelName)({
      name: model
    });
    const t = tasks({
      docs,
      model: name,
      path,
      force,
      tests,
      typescript,
      tailwind
    });
    await t.run();
  } catch (e) {
    console.log(_colors.default.error(e.message));
    process.exit((e === null || e === void 0 ? void 0 : e.existCode) || 1);
  }
};
exports.handler = handler;
const splitPathAndModel = pathSlashModel => {
  var _context13;
  const path = (0, _slice.default)(_context13 = pathSlashModel.split('/')).call(_context13, 0, -1).join('/');
  // This code will work whether or not there's a path in model
  // E.g. if model is just 'post',
  // path.split('/') will return ['post'].
  const model = pathSlashModel.split('/').pop();
  return {
    model,
    path
  };
};
exports.splitPathAndModel = splitPathAndModel;